#include "shell.h" 
 
/** 
 * length_list - determines length of linked list 
 * @h: pointer to first node 
 * 
 * Return: size of list 
 */ 
size_t length_list(const list_t *h) 
{ 
	size_t i = 0; 
 
	while (h) 
	{ 
		h = h->next; 
		i++; 
	} 
	return (i); 
} 
 
/** 
 * list_str - returns an array of strings of the list->sr 
 * @hp: pointer to first node 
 * 
 * Return: array of strings 
 */ 
char **list_str(list_t *hp) 
{ 
	list_t *node = hp; 
	size_t i = length_list(hp), j; 
	char **strs; 
	char *sr; 
 
	if (!hp || !i) 
		return (NULL); 
	strs = malloc(sizeof(char *) * (i + 1)); 
	if (!strs) 
		return (NULL); 
	for (i = 0; node; node = node->next, i++) 
	{ 
		sr = malloc(_lengstr(node->sr) + 1); 
		if (!sr) 
		{ 
			for (j = 0; j < i; j++) 
				free(strs[j]); 
			free(strs); 
			return (NULL); 
		} 
 
		sr = _strcpy(sr, node->sr); 
		strs[i] = sr; 
	} 
	strs[i] = NULL; 
	return (strs); 
} 
 
 
/** 
 * p_list - prints all elements of a list_t linked list 
 * @h: pointer to first node 
 * 
 * Return: size of list 
 */ 
size_t p_list(const list_t *h) 
{ 
	size_t i = 0; 
 
	while (h) 
	{ 
		_puts(_cfunction(h->num, 10, 0)); 
		_putchar(':'); 
		_putchar(' '); 
		_puts(h->sr ? h->sr : "(nil)"); 
		_puts("\n"); 
		h = h->next; 
		i++; 
	} 
	return (i); 
} 
 
/** 
 * node_starts_with - returns node whose string starts with prefix 
 * @node: pointer to list head 
 * @prefix: string to match 
 * @c: the next character after prefix to match 
 * 
 * Return: match node or null 
 */ 
list_t *node_starts_with(list_t *node, char *prefix, char c) 
{ 
	char *p = NULL; 
 
	while (node) 
	{ 
		p = starts_with(node->sr, prefix); 
		if (p && ((c == -1) || (*p == c))) 
			return (node); 
		node = node->next; 
	} 
	return (NULL); 
} 
 
/** 
 * get_node_index - gets the index of a node 
 * @hp: pointer to list head 
 * @node: pointer to the node 
 * 
 * Return: index of node or -1 
 */ 
ssize_t get_node_index(list_t *hp, list_t *node) 
{ 
	size_t i = 0; 
 
	while (hp) 
	{ 
		if (hp == node) 
			return (i); 
		hp = hp->next; 
		i++; 
	} 
	return (-1); 
}
